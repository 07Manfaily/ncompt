import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import {
    ArrowLeft,
    Edit,
    MoreHorizontal,
    Users,
    CheckCircle,
    X,
    MapPin,
    Search,
    Plus,
    Trash2,
    Clock,
    Building,
    ChevronDown,
    ChevronUp,
    Save,
    UserCheck,
    UserX,
    Star,
    MessageSquare,
    Calendar,
    Info,
    ClipboardList,
    ThumbsUp,
    ThumbsDown,
} from "lucide-react";
import { styled } from "@mui/material/styles";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import { DateTimePicker } from "react-tempusdominus-bootstrap";
import moment from "moment";
import {
    Grid,
    Button,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
} from "@mui/material";
import ColdForm from "./coldForm";
import { api } from "../services/api";
import { ToastContainer, toast } from "react-toastify";
import CardInfoAction from "./cardInfoFormationAction";
import CiblagModal from "../components/modal/ciblage";
import getInitial from "../utils/getInitial";
import SessionModal from "./SessionModal"; // Import du nouveau composant

const ProfileDashboard = () => {
    const navigate = useNavigate();
    const { code } = useParams();
    const [alert, setAlert] = useState(false);
    const [addSession, setAddSession] = useState(false);
    const [saving, setSaving] = useState(false);
    const [selectedSession, setSelectedSession] = useState(null);
    const [searchFilter, setSearchFilter] = useState("");
    const [statusFilter, setStatusFilter] = useState("all");
    const [pfData, setPfData] = useState([]);
    const [sessions, setSessions] = useState([]);
    const [participants, setParticipants] = useState([]);
    const [modalCiblage, setModalCiblage] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);

    const [sessionData, setSessionData] = useState({
        startDate: moment()
            .add(1, "day")
            .hour(8)
            .minute(0)
            .second(0)
            .millisecond(0)
            .format("YYYY-MM-DD HH:mm"),
        endDate: moment()
            .add(1, "day")
            .hour(12)
            .minute(0)
            .second(0)
            .millisecond(0)
            .format("YYYY-MM-DD HH:mm"),
        lieu: "",
        ville: "",
        formateur: "",
        status: "",
        teacher: "",
    });

    const [imgPic, setImgPic] = useState(null);

    const _getImage = async () => {
        try {
            const response = await api.get(`formation/${code}/pic.png`);
            console.log(response.data);
            setImgPic(response.data);
        } catch (err) {
            console.error(err);
        } finally {
            console.log("blabla");
        }
    };

    const closeModal = () => {
        setSelectedSession(null);
        setAddSession(false);
        setIsModalOpen(false);
        // Reset session data when closing modal
        setSessionData({
            startDate: moment()
                .add(1, "day")
                .hour(8)
                .minute(0)
                .second(0)
                .millisecond(0)
                .format("YYYY-MM-DD HH:mm"),
            endDate: moment()
                .add(1, "day")
                .hour(12)
                .minute(0)
                .second(0)
                .millisecond(0)
                .format("YYYY-MM-DD HH:mm"),
            lieu: "",
            ville: "",
            formateur: "",
            status: "",
            teacher: "",
        });
    };

    const handleOpenModalCiblag = () => {
        setModalCiblage(true);
    };

    const handleCloseModalCiblag = () => {
        setModalCiblage(false);
    };

    const _status = [
        "Planifiée",
        "Reportée",
        "Terminée",
        "En cours de planification",
        "En cours d'exécution",
        "Attente de rédaction du cahier des charges",
        "Attente de validation du cahier des charges",
        "Appel d'offres en cours",
    ];

    // Fonction pour créer la session
    const createSession = async (sessionInfo) => {
        setSaving(true);
        try {
            const updateData = {
                code_formation: code,
                start_datetime: sessionInfo.startDate,
                end_datetime: sessionInfo.endDate,
                location: sessionInfo.lieu,
                city: sessionInfo.ville,
                status: sessionInfo.status,
                teacher: sessionInfo.teacher,
                participants: sessionInfo.participants || [],
            };

            const response = await api.post(
                `insert/info/sessionformation/${code}`,
                updateData,
                {
                    headers: {
                        "Content-Type": "application/json",
                    },
                }
            );

            if (response.status === 200 || response.status === 201) {
                await handleGetSession();

                toast.success("Session créée avec succès", {
                    position: "top-center",
                    autoClose: 3000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                });

                closeModal();
            }
        } catch (error) {
            console.error("Error while creating:", error);
            toast.error("Erreur lors de la création de la session", {
                position: "top-center",
                autoClose: 3000,
                theme: "dark",
            });
        } finally {
            setSaving(false);
        }
    };

    // Fonction pour sauvegarder la session
    const saveSession = async (sessionInfo) => {
        setSaving(true);

        const updateData = {
            code_session: selectedSession.code_session,
            start_datetime: sessionInfo.startDate,
            end_datetime: sessionInfo.endDate,
            location: sessionInfo.lieu,
            city: sessionInfo.ville,
            status: sessionInfo.status,
            teacher: sessionInfo.teacher,
            participants: sessionInfo.participants || [],
        };

        try {
            const response = await api.put(
                `put/info/sessionformation/${selectedSession.code_session}`,
                updateData,
                {
                    headers: {
                        "Content-Type": "application/json",
                    },
                }
            );

            if (response.status === 200) {
                toast.success("Modification effectuée avec succès", {
                    position: "top-center",
                    autoClose: 3000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                });

                // Mettre à jour la session dans la liste
                setSessions((prev) =>
                    prev.map((session) => {
                        if (session.id === selectedSession.id) {
                            return {
                                ...session,
                                start_datetime: sessionInfo.startDate,
                                end_datetime: sessionInfo.endDate,
                                location: sessionInfo.lieu,
                                city: sessionInfo.ville,
                                status: sessionInfo.status,
                                teacher: sessionInfo.teacher,
                                color: getSessionColor({
                                    ...session,
                                    status: sessionInfo.status,
                                }),
                            };
                        }
                        return session;
                    })
                );

                closeModal();
            }
        } catch (error) {
            console.error("Error while saving:", error);
            toast.error("Erreur lors de la sauvegarde", {
                position: "top-center",
                autoClose: 3000,
                theme: "dark",
            });
        } finally {
            setSaving(false);
        }
    };

    // Fonction pour supprimer une session de formation
    const deleteSession = async (codeSession) => {
        try {
            const response = await api.delete(
                `delete/info/sessionformation/${codeSession}`
            );

            if (response.status === 200) {
                await handleGetSession();

                toast.success("Suppression effectuée avec succès", {
                    position: "top-center",
                    autoClose: 3000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                });

                closeModal();
            }
        } catch (error) {
            console.error("Error deleting:", error);
            toast.error("Erreur lors de la suppression", {
                position: "top-center",
                autoClose: 3000,
                theme: "dark",
            });
        }
    };

    const handleGetSession = async () => {
        try {
            const response = await api.get(`formation/${code}/sessions`);
            if (response.status === 200) {
                console.log("reponse sessions", response.data.data);
                const sessionsWithParticipants = response.data.data.map(session => ({
                    ...session,
                    participants: session.participants || []
                }));
                setSessions(sessionsWithParticipants);
            }
        } catch (error) {
            console.error("Error fetching sessions:", error);
        }
    };

    const handleGetFormationPlanByCode = async () => {
        try {
            const response = await api.get(`get/action_formation/${code}`);
            if (response.status === 200) {
                setPfData(response.data.data);
                console.log("response pf", response.data);
            }
        } catch (error) {
            console.log("error", error);
        }
    };

    const fetchUsers = async () => {
        try {
            const response = await api.get("get/liste_collaborateur");
            console.log("Participants loaded:", response.data.data);
            setParticipants(response.data.data || []);
        } catch (error) {
            console.error("Erreur lors du chargement des collaborateurs:", error);
            setParticipants([]);
        }
    };

    useEffect(() => {
        handleGetSession();
        handleGetFormationPlanByCode();
        fetchUsers();
        _getImage();
    }, [code]);

    // Fonction pour filtrer
    const filteredSessions = sessions?.filter((session) => {
        const matchesSearch =
            session?.code_session
                ?.toLowerCase()
                .includes(searchFilter.toLowerCase()) ||
            session.code_session?.toLowerCase().includes(searchFilter.toLowerCase());
        const matchesStatus =
            statusFilter === "all" ||
            session?.status
                ?.toLowerCase()
                .replace(" ", "")
                .includes(statusFilter.toLowerCase());
        return matchesSearch && matchesStatus;
    }) || [];

    const getProgressColor = (progress) => {
        if (progress >= 80) return "#10b981";
        if (progress >= 60) return "#f59e0b";
        if (progress >= 40) return "#3b82f6";
        return "#ef4444";
    };

    const getStatusColor = (status) => {
        switch (status) {
            case "Planifiée":
                return "#10b981";
            case "Reportée":
                return "#faaf97ff";
            case "En cours de planification":
                return "#f59e0b";
            case "Terminée":
                return "#8b5cf6";
            case null:
            default:
                return "#9ca3af";
        }
    };

    // Vérifier si une session est active
    const isSessionActive = (session) => {
        return session.start_datetime && session.end_datetime && session.status;
    };

    const getSessionDisplayStatus = (status) => {
        return status === null ? "En attente de validation" : status;
    };

    // Déterminer la couleur de la session
    const getSessionColor = (session) => {
        if (
            !session?.start_datetime ||
            !session?.end_datetime ||
            session?.participants?.length === 0
        ) return "gray";

        switch (session.status) {
            case "Planifiée":
                return "green";
            case "Reportée":
                return "#cc3300";
            case "En cours de planification":
                return "yellow";
            case "Terminée":
                return "pink";
            default:
                return "gray";
        }
    };

    // Fonction pour initialiser les données de session lors de l'édition
    const handleEditSession = (session) => {
        setSelectedSession(session);
        setSessionData({
            startDate: session.start_datetime || moment().add(1, "day").hour(8).minute(0).format("YYYY-MM-DD HH:mm"),
            endDate: session.end_datetime || moment().add(1, "day").hour(12).minute(0).format("YYYY-MM-DD HH:mm"),
            lieu: session.location || "",
            ville: session.city || "",
            status: session.status || "",
            teacher: session.teacher || "",
        });
        setAddSession(false);
        setIsModalOpen(true);
    };

    // Fonction pour initialiser une nouvelle session
    const handleAddNewSession = () => {
        setAddSession(true);
        setSelectedSession({
            id: 'temp',
            participants: []
        });
        setSessionData({
            startDate: moment()
                .add(1, "day")
                .hour(8)
                .minute(0)
                .second(0)
                .millisecond(0)
                .format("YYYY-MM-DD HH:mm"),
            endDate: moment()
                .add(1, "day")
                .hour(12)
                .minute(0)
                .second(0)
                .millisecond(0)
                .format("YYYY-MM-DD HH:mm"),
            lieu: "",
            ville: "",
            status: "",
            teacher: "",
        });
        setIsModalOpen(true);
    };

    return (
        <Grid
            style={{
                minHeight: "100vh",
                padding: "24px",
                backgroundColor: "#f9fafb",
                fontFamily:
                    '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
            }}
        >
            <CiblagModal
                sx={{ borderRadius: 7 }}
                open={modalCiblage}
                onClose={handleCloseModalCiblag}
                code={code}
            />

            <ToastContainer
                position="top-center"
                autoClose={3000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick={false}
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="dark"
            />

            <Grid style={{ maxWidth: "1700px", margin: "0 auto" }}>
                {/* Header */}
                <Grid
                    style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        marginBottom: "32px",
                    }}
                >
                    <Grid style={{ display: "flex", alignItems: "center", gap: "16px" }}>
                        <Button
                            onClick={(e) => navigate(`/formation-plan`, { replace: true })}
                        >
                            <ArrowLeft
                                size={24}
                                color="#6b7280"
                                style={{ cursor: "pointer" }}
                            />
                        </Button>
                        <h1
                            style={{
                                fontSize: "28px",
                                fontWeight: "600",
                                color: "#111827",
                                margin: 0,
                            }}
                        >
                            Configuration de l'action de formation
                        </h1>
                    </Grid>
                    <Grid style={{ display: "flex", alignItems: "center", gap: "12px" }}>
                        <span
                            style={{
                                padding: "6px 12px",
                                backgroundColor: "#e5e7eb",
                                color: "#6b7280",
                                borderRadius: "20px",
                                fontSize: "14px",
                            }}
                        >
                            Pending
                        </span>
                        <span style={{ color: "#6b7280", fontSize: "16px" }}>
                            March, 2024
                        </span>
                    </Grid>
                </Grid>

                {/* Main Grid - 2 Columns */}
                <Grid
                    style={{
                        display: "grid",
                        gridTemplateColumns: "1fr 1fr",
                        gap: "24px",
                        marginBottom: "24px",
                    }}
                >
                    {/* Left Column */}
                    <Grid
                        style={{ display: "flex", flexDirection: "column", gap: "24px" }}
                    >
                        {/* composant pour les details de l'action de formation */}
                        <CardInfoAction
                            title={pfData && pfData.title}
                            fullTitle={pfData && pfData.title}
                            code={pfData.code_formation}
                            img={imgPic}
                        />
                        {/* Formulaire Chaud */}
                        <Grid
                            style={{
                                background: "white",
                                borderRadius: "12px",
                                boxShadow: "0 1px 3px rgba(0, 0, 0, 0.1)",
                                overflow: "hidden",
                            }}
                        >
                            <ColdForm />
                        </Grid>
                    </Grid>

                    {/* Right Column */}
                    <Grid
                        style={{ display: "flex", flexDirection: "column", gap: "24px" }}
                    >
                        {/* Sessions de formation */}
                        <Grid
                            style={{
                                background: "white",
                                borderRadius: "12px",
                                boxShadow: "0 1px 3px rgba(0, 0, 0, 0.1)",
                                overflow: "hidden",
                            }}
                        >
                            <Grid style={{ padding: "24px 24px 16px" }}>
                                <Grid
                                    style={{
                                        display: "flex",
                                        justifyContent: "space-between",
                                        alignItems: "center",
                                        marginBottom: "16px",
                                    }}
                                >
                                    <h3
                                        style={{
                                            fontSize: "18px",
                                            fontWeight: "600",
                                            color: "#111827",
                                            margin: 0,
                                        }}
                                    >
                                        Session de formation
                                    </h3>
                                </Grid>

                                {/* Barre de recherche et filtres */}
                                <div
                                    style={{ display: "flex", gap: "12px", marginBottom: "16px" }}
                                >
                                    <div style={{ flex: 1, position: "relative" }}>
                                        <Search
                                            size={16}
                                            color="#6b7280"
                                            style={{
                                                position: "absolute",
                                                left: "12px",
                                                top: "50%",
                                                transform: "translateY(-50%)",
                                            }}
                                        />
                                        <input
                                            type="text"
                                            placeholder="Rechercher des session..."
                                            value={searchFilter}
                                            onChange={(e) => setSearchFilter(e.target.value)}
                                            style={{
                                                width: "100%",
                                                padding: "8px 12px 8px 36px",
                                                border: "1px solid #d1d5db",
                                                borderRadius: "8px",
                                                fontSize: "14px",
                                                backgroundColor: "#f9fafb",
                                            }}
                                        />
                                    </div>
                                    <select
                                        value={statusFilter}
                                        onChange={(e) => setStatusFilter(e.target.value)}
                                        style={{
                                            padding: "8px 12px",
                                            border: "1px solid #d1d5db",
                                            borderRadius: "8px",
                                            fontSize: "14px",
                                            backgroundColor: "#f9fafb",
                                            minWidth: "20px",
                                        }}
                                    >
                                        <option value="all">Toutes les session</option>
                                        <option value="Reportée">Reportée</option>
                                        <option value="En cours de planification">
                                            En cours de planification
                                        </option>
                                        <option value="Terminée">Terminée</option>
                                        <option value="Planifiée">Planifiée</option>
                                    </select>
                                    <button
                                        onClick={handleAddNewSession}
                                        style={{
                                            padding: "8px 16px",
                                            backgroundColor: "#10b981",
                                            color: "white",
                                            border: "none",
                                            borderRadius: "8px",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            cursor: "pointer",
                                            display: "flex",
                                            alignItems: "center",
                                            gap: "6px",
                                            transition: "background-color 0.2s",
                                            whiteSpace: "nowrap",
                                        }}
                                        onMouseEnter={(e) => {
                                            e.currentTarget.style.backgroundColor = "#059669";
                                        }}
                                        onMouseLeave={(e) => {
                                            e.currentTarget.style.backgroundColor = "#10b981";
                                        }}
                                        title="Créer une nouvelle session"
                                    >
                                        <Plus size={16} />
                                        Ajouter
                                    </button>
                                    <button
                                        onClick={handleOpenModalCiblag}
                                        style={{
                                            padding: "8px 16px",
                                            backgroundColor: "#000000ff",
                                            color: "white",
                                            border: "none",
                                            borderRadius: "8px",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            cursor: "pointer",
                                            display: "flex",
                                            alignItems: "center",
                                            gap: "6px",
                                            transition: "background-color 0.2s",
                                            whiteSpace: "nowrap",
                                        }}
                                        onMouseEnter={(e) => {
                                            e.currentTarget.style.backgroundColor = "#5c0079ff";
                                        }}
                                        onMouseLeave={(e) => {
                                            e.currentTarget.style.backgroundColor = "#000000ff";
                                        }}
                                        title="Ciblage des participants"
                                    >
                                        <Users size={16} />
                                        Ciblage
                                    </button>
                                </div>
                            </Grid>

                            <Grid
                                style={{
                                    padding: "0 24px 24px",
                                    maxHeight: "600px",
                                    overflowY: "auto",
                                }}
                            >
                                <Grid
                                    style={{
                                        display: "grid",
                                        gridTemplateColumns: "repeat(3, 1fr)",
                                        gap: "16px",
                                    }}
                                >
                                    {filteredSessions.map((session) => {
                                        const sessionColor = getSessionColor(session);
                                        const active = isSessionActive(session);

                                        return (
                                            <Grid
                                                key={session.id}
                                                onClick={() => handleEditSession(session)}
                                                style={{
                                                    padding: "16px",
                                                    borderRadius: "12px",
                                                    border: "1px solid",
                                                    backgroundColor:
                                                        sessionColor === "yellow"
                                                            ? "#fefce8"
                                                            : sessionColor === "blue"
                                                                ? "#eff6ff"
                                                                : sessionColor === "pink"
                                                                    ? "#fdf2f8"
                                                                    : sessionColor === "green"
                                                                        ? "#f0fdf4"
                                                                        : "#f9fafb",
                                                    borderColor:
                                                        sessionColor === "yellow"
                                                            ? "#fde047"
                                                            : sessionColor === "blue"
                                                                ? "#93c5fd"
                                                                : sessionColor === "pink"
                                                                    ? "#f9a8d4"
                                                                    : sessionColor === "green"
                                                                        ? "#86efac"
                                                                        : "#d1d5db",
                                                    cursor: "pointer",
                                                    transition: "all 0.3s ease",
                                                    position: "relative",
                                                    opacity: active ? 1 : 0.8,
                                                }}
                                                onMouseEnter={(e) => {
                                                    e.currentTarget.style.transform = "translateY(-4px)";
                                                    e.currentTarget.style.boxShadow =
                                                        "0 8px 25px rgba(0,0,0,0.15)";
                                                }}
                                                onMouseLeave={(e) => {
                                                    e.currentTarget.style.transform = "translateY(0)";
                                                    e.currentTarget.style.boxShadow = "none";
                                                }}
                                            >
                                                {!isSessionActive(session) && (
                                                    <div
                                                        style={{
                                                            position: "absolute",
                                                            top: "8px",
                                                            right: "8px",
                                                            width: "20px",
                                                            height: "20px",
                                                            backgroundColor: "#ef4444",
                                                            borderRadius: "50%",
                                                            display: "flex",
                                                            alignItems: "center",
                                                            justifyContent: "center",
                                                            fontSize: "10px",
                                                            color: "white",
                                                            fontWeight: "bold",
                                                        }}
                                                    >
                                                        !
                                                    </div>
                                                )}

                                                <Grid
                                                    style={{
                                                        display: "flex",
                                                        justifyContent: "space-between",
                                                        alignItems: "center",
                                                        marginBottom: "8px",
                                                    }}
                                                >
                                                    <span style={{ fontSize: "11px", color: "#6b7280" }}>
                                                        {session.start_datetime}
                                                    </span>
                                                </Grid>

                                                <h4
                                                    style={{
                                                        fontWeight: "600",
                                                        color: "#111827",
                                                        margin: "0 0 6px 0",
                                                        fontSize: "13px",
                                                    }}
                                                >
                                                    {session.code_session}
                                                </h4>

                                                <Grid
                                                    style={{
                                                        display: "flex",
                                                        justifyContent: "space-between",
                                                        alignItems: "center",
                                                        marginBottom: "8px",
                                                    }}
                                                >
                                                    <span
                                                        style={{
                                                            fontSize: "11px",
                                                            color: getStatusColor(session.status),
                                                            fontWeight: "500",
                                                        }}
                                                    >
                                                        {getSessionDisplayStatus(session.status)}
                                                    </span>
                                                </Grid>

                                                <Grid style={{
                                                    display: "flex",
                                                    justifyContent: "space-between",
                                                    alignItems: "center",
                                                }}>
                                                    <Grid style={{ display: "flex" }}>
                                                        {session.participants
                                                            .slice(0, 2)
                                                            .map((member, index) => (
                                                                <Grid
                                                                    key={index}
                                                                    style={{
                                                                        width: "20px",
                                                                        height: "20px",
                                                                        borderRadius: "50%",
                                                                        border: "2px solid white",
                                                                        marginLeft: index > 0 ? "-4px" : "0",
                                                                        display: "flex",
                                                                        alignItems: "center",
                                                                        justifyContent: "center",
                                                                        fontSize: "8px",
                                                                        backgroundColor:
                                                                            index === 0 ? "#fb923c" : "#60a5fa",
                                                                        zIndex: session.participants.length - index,
                                                                        color: "white",
                                                                    }}
                                                                >
                                                                    {getInitial(member.prenom, member.nom)}
                                                                </Grid>
                                                            ))}

                                                        {session.participants.length > 2 && (
                                                            <Grid
                                                                style={{
                                                                    width: "20px",
                                                                    height: "20px",
                                                                    borderRadius: "50%",
                                                                    border: "2px solid white",
                                                                    marginLeft: "-4px",
                                                                    display: "flex",
                                                                    alignItems: "center",
                                                                    justifyContent: "center",
                                                                    fontSize: "8px",
                                                                    backgroundColor: "#e5e7eb",
                                                                    color: "#6b7280",
                                                                }}
                                                            >
                                                                +{session.participants.length - 2}
                                                            </Grid>
                                                        )}
                                                    </Grid>

                                                    <span
                                                        style={{
                                                            padding: "2px 6px",
                                                            borderRadius: "6px",
                                                            fontSize: "9px",
                                                            fontWeight: "500",
                                                            backgroundColor:
                                                                sessionColor === "yellow"
                                                                    ? "#fef3c7"
                                                                    : sessionColor === "blue"
                                                                        ? "#dbeafe"
                                                                        : sessionColor === "pink"
                                                                            ? "#fce7f3"
                                                                            : sessionColor === "green"
                                                                                ? "#dcfce7"
                                                                                : "#f3e8ff",
                                                            color:
                                                                sessionColor === "yellow"
                                                                    ? "#92400e"
                                                                    : sessionColor === "blue"
                                                                        ? "#1e40af"
                                                                        : sessionColor === "pink"
                                                                            ? "#be185d"
                                                                            : sessionColor === "green"
                                                                                ? "#166534"
                                                                                : "#7c3aed",
                                                        }}
                                                    >
                                                        {session.participants.length} participants
                                                    </span>
                                                </Grid>
                                            </Grid>
                                        );
                                    })}
                                </Grid>

                                {filteredSessions.length === 0 && (
                                    <Grid
                                        style={{
                                            textAlign: "center",
                                            padding: "40px 20px",
                                            color: "#6b7280",
                                        }}
                                    >
                                        <Search
                                            size={48}
                                            color="#d1d5db"
                                            style={{ marginBottom: "16px" }}
                                        />
                                        <p style={{ margin: 0, fontSize: "16px" }}>
                                            Aucune session de formation trouvée
                                        </p>
                                        <p style={{ margin: "8px 0 0 0", fontSize: "14px" }}>
                                            Essayez de modifier vos critères de recherche
                                        </p>
                                    </Grid>
                                )}
                            </Grid>




                            import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import {
    ArrowLeft,
    Edit,
    MoreHorizontal,
    Users,
    CheckCircle,
    X,
    MapPin,
    Search,
    Plus,
    Trash2,
    Clock,
    Building,
    ChevronDown,
    ChevronUp,
    Save,
} from "lucide-react";
import moment from "moment";
import {
    Grid,
    Button,
} from "@mui/material";
import ColdForm from "./coldForm";
import { api } from "../services/api";
import { ToastContainer, toast } from "react-toastify";
import CardInfoAction from "./cardInfoFormationAction";
import CiblagModal from "../components/modal/ciblage";
import getInitial from "../utils/getInitial";
import SessionModal from "./SessionModal"; // Import du nouveau composant

const ProfileDashboard = () => {
    const navigate = useNavigate();
    const { code } = useParams();
    const [alert, setAlert] = useState(false);
    const [addSession, setAddSession] = useState(false);
    const [saving, setSaving] = useState(false);
    const [selectedSession, setSelectedSession] = useState(null);
    const [searchFilter, setSearchFilter] = useState("");
    const [statusFilter, setStatusFilter] = useState("all");
    const [pfData, setPfData] = useState([]);
    const [sessions, setSessions] = useState([]);
    const [participants, setParticipants] = useState([]);
    const [modalCiblage, setModalCiblage] = useState(false);

    const handleCloseModalCiblag = () => {
        setModalCiblage(false);
    };

    const handleOpenModalCiblag = () => {
        setModalCiblage(true);
    };

    const [sessionData, setSessionData] = useState({
        startDate: moment()
            .add(1, "day")
            .hour(8)
            .minute(0)
            .second(0)
            .millisecond(0)
            .format("YYYY-MM-DD HH:mm"),
        endDate: moment()
            .add(1, "day")
            .hour(12)
            .minute(0)
            .second(0)
            .millisecond(0)
            .format("YYYY-MM-DD HH:mm"),
        lieu: "",
        ville: "",
        formateur: "",
        status: "",
        teacher: "",
    });

    const [imgPic, setImgPic] = useState(null);

    const _getImage = async () => {
        try {
            const response = await api.get(`formation/${code}/pic.png`);
            console.log(response.data);
            setImgPic(response.data);
        } catch (err) {
            console.error(err);
        } finally {
            console.log("blabla");
        }
    };

    const _status = [
        "Planifiée",
        "Reportée",
        "Terminée",
        "En cours de planification",
        "En cours d'exécution",
        "Attente de rédaction du cahier des charges",
        "Attente de validation du cahier des charges",
        "Appel d'offres en cours",
    ];

    // Fonction pour créer la session
    const createSession = async () => {
        setSaving(true);
        try {
            const participants = selectedSession?.participants || [];

            const updateData = {
                code_formation: code,
                start_datetime: sessionData.startDate,
                end_datetime: sessionData.endDate,
                location: sessionData.lieu,
                city: sessionData.ville,
                status: sessionData.status,
                teacher: sessionData.teacher,
                participants: participants,
            };

            const response = await api.post(
                `insert/info/sessionformation/${code}`,
                updateData,
                {
                    headers: {
                        "Content-Type": "application/json",
                    },
                }
            );

            console.log("create", response);

            if (response.status === 200 || response.status === 201) {
                await handleGetSession();

                toast.success("Session créée avec succès", {
                    position: "top-center",
                    autoClose: 3000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                });

                closeModal();
            }
        } catch (error) {
            console.error("Error while creating:", error);
            toast.error("Erreur lors de la création de la session", {
                position: "top-center",
                autoClose: 3000,
                theme: "dark",
            });
        } finally {
            setSaving(false);
        }
    };

    // Fonction pour sauvegarder la session
    const saveSession = async () => {
        setSaving(true);

        const updateData = {
            code_session: selectedSession.code_session,
            start_datetime: sessionData.startDate,
            end_datetime: sessionData.endDate,
            location: sessionData.lieu,
            city: sessionData.ville,
            status: sessionData.status,
            teacher: sessionData.teacher,
            participants: selectedSession.participants || [],
        };

        try {
            const response = await api.put(
                `put/info/sessionformation/${selectedSession.code_session}`,
                updateData,
                {
                    headers: {
                        "Content-Type": "application/json",
                    },
                }
            );

            if (response.status === 200) {
                toast.success("Modification effectuée avec succès", {
                    position: "top-center",
                    autoClose: 3000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                });

                setSessions((prev) =>
                    prev.map((session) => {
                        if (session.id === selectedSession.id) {
                            return {
                                ...session,
                                start_datetime: sessionData.startDate,
                                end_datetime: sessionData.endDate,
                                location: sessionData.lieu,
                                city: sessionData.ville,
                                status: sessionData.status,
                                teacher: sessionData.teacher,
                                color: getSessionColor({
                                    ...session,
                                    status: sessionData.status,
                                }),
                            };
                        }
                        return session;
                    })
                );

                closeModal();
            }
        } catch (error) {
            console.error("Error while saving:", error);
            toast.error("Erreur lors de la sauvegarde", {
                position: "top-center",
                autoClose: 3000,
                theme: "dark",
            });
        } finally {
            setSaving(false);
        }
    };

    // Fonction pour supprimer une session de formation
    const deleteSession = async (codeSession) => {
        try {
            const response = await api.delete(
                `delete/info/sessionformation/${codeSession}`
            );

            if (response.status === 200) {
                await handleGetSession();

                toast.success("Suppression effectuée avec succès", {
                    position: "top-center",
                    autoClose: 3000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                });

                closeModal();
            }
        } catch (error) {
            console.error("Error deleting:", error);
            toast.error("Erreur lors de la suppression", {
                position: "top-center",
                autoClose: 3000,
                theme: "dark",
            });
        }
    };

    const handleGetSession = async () => {
        try {
            const response = await api.get(`formation/${code}/sessions`);
            if (response.status === 200) {
                console.log("reponse sessions", response.data.data);
                const sessionsWithParticipants = response.data.data.map(session => ({
                    ...session,
                    participants: session.participants || []
                }));
                setSessions(sessionsWithParticipants);
            }
        } catch (error) {
            console.error("Error fetching sessions:", error);
        }
    };

    const handleGetFormationPlanByCode = async () => {
        try {
            const response = await api.get(`get/action_formation/${code}`);
            if (response.status === 200) {
                setPfData(response.data.data);
                console.log("response pf", response.data);
            }
        } catch (error) {
            console.log("error", error);
        }
    };

    const fetchUsers = async () => {
        try {
            const response = await api.get("get/liste_collaborateur");
            console.log("Participants loaded:", response.data.data);
            setParticipants(response.data.data || []);
        } catch (error) {
            console.error("Erreur lors du chargement des collaborateurs:", error);
            setParticipants([]);
        }
    };

    useEffect(() => {
        handleGetSession();
        handleGetFormationPlanByCode();
        fetchUsers();
        _getImage();
    }, [code]);

    // Fonction pour filtrer
    const filteredSessions = sessions?.filter((session) => {
        const matchesSearch =
            session?.code_session
                ?.toLowerCase()
                .includes(searchFilter.toLowerCase()) ||
            session.code_session?.toLowerCase().includes(searchFilter.toLowerCase());
        const matchesStatus =
            statusFilter === "all" ||
            session?.status
                ?.toLowerCase()
                .replace(" ", "")
                .includes(statusFilter.toLowerCase());
        return matchesSearch && matchesStatus;
    }) || [];

    const getProgressColor = (progress) => {
        if (progress >= 80) return "#10b981";
        if (progress >= 60) return "#f59e0b";
        if (progress >= 40) return "#3b82f6";
        return "#ef4444";
    };

    const getStatusColor = (status) => {
        switch (status) {
            case "Planifiée":
                return "#10b981";
            case "Reportée":
                return "#faaf97ff";
            case "En cours de planification":
                return "#f59e0b";
            case "Terminée":
                return "#8b5cf6";
            case null:
            default:
                return "#9ca3af";
        }
    };

    // Vérifier si une session est active
    const isSessionActive = (session) => {
        return session.start_datetime && session.end_datetime && session.status;
    };

    const getSessionDisplayStatus = (status) => {
        return status === null ? "En attente de validation" : status;
    };

    // Déterminer la couleur de la session
    const getSessionColor = (session) => {
        if (
            !session?.start_datetime ||
            !session?.end_datetime ||
            session?.participants?.length === 0
        ) return "gray";

        switch (session.status) {
            case "Planifiée":
                return "green";
            case "Reportée":
                return "#cc3300";
            case "En cours de planification":
                return "yellow";
            case "Terminée":
                return "pink";
            default:
                return "gray";
        }
    };

    // Fonction pour fermer le modal et reset les données
    const closeModal = () => {
        setSelectedSession(null);
        setAddSession(false);
        setSessionData({
            startDate: moment()
                .add(1, "day")
                .hour(8)
                .minute(0)
                .second(0)
                .millisecond(0)
                .format("YYYY-MM-DD HH:mm"),
            endDate: moment()
                .add(1, "day")
                .hour(12)
                .minute(0)
                .second(0)
                .millisecond(0)
                .format("YYYY-MM-DD HH:mm"),
            lieu: "",
            ville: "",
            formateur: "",
            status: "",
            teacher: "",
        });
    };

    // Fonction pour initialiser les données de session lors de l'édition
    const handleEditSession = (session) => {
        setSelectedSession(session);
        setSessionData({
            startDate: session.start_datetime || moment().add(1, "day").hour(8).minute(0).format("YYYY-MM-DD HH:mm"),
            endDate: session.end_datetime || moment().add(1, "day").hour(12).minute(0).format("YYYY-MM-DD HH:mm"),
            lieu: session.location || "",
            ville: session.city || "",
            status: session.status || "",
            teacher: session.teacher || "",
        });
    };

    // Fonction pour initialiser une nouvelle session
    const handleAddNewSession = () => {
        setAddSession(true);
        setSelectedSession({
            id: 'temp',
            participants: []
        });
        setSessionData({
            startDate: moment()
                .add(1, "day")
                .hour(8)
                .minute(0)
                .second(0)
                .millisecond(0)
                .format("YYYY-MM-DD HH:mm"),
            endDate: moment()
                .add(1, "day")
                .hour(12)
                .minute(0)
                .second(0)
                .millisecond(0)
                .format("YYYY-MM-DD HH:mm"),
            lieu: "",
            ville: "",
            status: "",
            teacher: "",
        });
    };

    return (
        <Grid
            style={{
                minHeight: "100vh",
                padding: "24px",
                backgroundColor: "#f9fafb",
                fontFamily:
                    '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
            }}
        >
            <CiblagModal
                sx={{ borderRadius: 7 }}
                open={modalCiblage}
                onClose={handleCloseModalCiblag}
                code={code}
            />

            <ToastContainer
                position="top-center"
                autoClose={3000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick={false}
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="dark"
            />

            <Grid style={{ maxWidth: "1700px", margin: "0 auto" }}>
                {/* Header */}
                <Grid
                    style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        marginBottom: "32px",
                    }}
                >
                    <Grid style={{ display: "flex", alignItems: "center", gap: "16px" }}>
                        <Button
                            onClick={(e) => navigate(`/formation-plan`, { replace: true })}
                        >
                            <ArrowLeft
                                size={24}
                                color="#6b7280"
                                style={{ cursor: "pointer" }}
                            />
                        </Button>
                        <h1
                            style={{
                                fontSize: "28px",
                                fontWeight: "600",
                                color: "#111827",
                                margin: 0,
                            }}
                        >
                            Configuration de l'action de formation
                        </h1>
                    </Grid>
                    <Grid style={{ display: "flex", alignItems: "center", gap: "12px" }}>
                        <span
                            style={{
                                padding: "6px 12px",
                                backgroundColor: "#e5e7eb",
                                color: "#6b7280",
                                borderRadius: "20px",
                                fontSize: "14px",
                            }}
                        >
                            Pending
                        </span>
                        <span style={{ color: "#6b7280", fontSize: "16px" }}>
                            March, 2024
                        </span>
                    </Grid>
                </Grid>

                {/* Main Grid - 2 Columns */}
                <Grid
                    style={{
                        display: "grid",
                        gridTemplateColumns: "1fr 1fr",
                        gap: "24px",
                        marginBottom: "24px",
                    }}
                >
                    {/* Left Column */}
                    <Grid
                        style={{ display: "flex", flexDirection: "column", gap: "24px" }}
                    >
                        {/* composant pour les details de l'action de formation */}
                        <CardInfoAction
                            title={pfData && pfData.title}
                            fullTitle={pfData && pfData.title}
                            code={pfData.code_formation}
                            img={imgPic}
                        />
                        {/* Formulaire Chaud */}
                        <Grid
                            style={{
                                background: "white",
                                borderRadius: "12px",
                                boxShadow: "0 1px 3px rgba(0, 0, 0, 0.1)",
                                overflow: "hidden",
                            }}
                        >
                            <ColdForm />
                        </Grid>
                    </Grid>

                    {/* Right Column */}
                    <Grid
                        style={{ display: "flex", flexDirection: "column", gap: "24px" }}
                    >
                        {/* Sessions de formation */}
                        <Grid
                            style={{
                                background: "white",
                                borderRadius: "12px",
                                boxShadow: "0 1px 3px rgba(0, 0, 0, 0.1)",
                                overflow: "hidden",
                            }}
                        >
                            <Grid style={{ padding: "24px 24px 16px" }}>
                                <Grid
                                    style={{
                                        display: "flex",
                                        justifyContent: "space-between",
                                        alignItems: "center",
                                        marginBottom: "16px",
                                    }}
                                >
                                    <h3
                                        style={{
                                            fontSize: "18px",
                                            fontWeight: "600",
                                            color: "#111827",
                                            margin: 0,
                                        }}
                                    >
                                        Session de formation
                                    </h3>
                                </Grid>

                                {/* Barre de recherche et filtres */}
                                <div
                                    style={{ display: "flex", gap: "12px", marginBottom: "16px" }}
                                >
                                    <div style={{ flex: 1, position: "relative" }}>
                                        <Search
                                            size={16}
                                            color="#6b7280"
                                            style={{
                                                position: "absolute",
                                                left: "12px",
                                                top: "50%",
                                                transform: "translateY(-50%)",
                                            }}
                                        />
                                        <input
                                            type="text"
                                            placeholder="Rechercher des session..."
                                            value={searchFilter}
                                            onChange={(e) => setSearchFilter(e.target.value)}
                                            style={{
                                                width: "100%",
                                                padding: "8px 12px 8px 36px",
                                                border: "1px solid #d1d5db",
                                                borderRadius: "8px",
                                                fontSize: "14px",
                                                backgroundColor: "#f9fafb",
                                            }}
                                        />
                                    </div>
                                    <select
                                        value={statusFilter}
                                        onChange={(e) => setStatusFilter(e.target.value)}
                                        style={{
                                            padding: "8px 12px",
                                            border: "1px solid #d1d5db",
                                            borderRadius: "8px",
                                            fontSize: "14px",
                                            backgroundColor: "#f9fafb",
                                            minWidth: "20px",
                                        }}
                                    >
                                        <option value="all">Toutes les session</option>
                                        <option value="Reportée">Reportée</option>
                                        <option value="En cours de planification">
                                            En cours de planification
                                        </option>
                                        <option value="Terminée">Terminée</option>
                                        <option value="Planifiée">Planifiée</option>
                                    </select>
                                    <button
                                        onClick={handleAddNewSession}
                                        style={{
                                            padding: "8px 16px",
                                            backgroundColor: "#10b981",
                                            color: "white",
                                            border: "none",
                                            borderRadius: "8px",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            cursor: "pointer",
                                            display: "flex",
                                            alignItems: "center",
                                            gap: "6px",
                                            transition: "background-color 0.2s",
                                            whiteSpace: "nowrap",
                                        }}
                                        onMouseEnter={(e) => {
                                            e.currentTarget.style.backgroundColor = "#059669";
                                        }}
                                        onMouseLeave={(e) => {
                                            e.currentTarget.style.backgroundColor = "#10b981";
                                        }}
                                        title="Créer une nouvelle session"
                                    >
                                        <Plus size={16} />
                                        Ajouter
                                    </button>
                                    <button
                                        onClick={handleOpenModalCiblag}
                                        style={{
                                            padding: "8px 16px",
                                            backgroundColor: "#000000ff",
                                            color: "white",
                                            border: "none",
                                            borderRadius: "8px",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            cursor: "pointer",
                                            display: "flex",
                                            alignItems: "center",
                                            gap: "6px",
                                            transition: "background-color 0.2s",
                                            whiteSpace: "nowrap",
                                        }}
                                        onMouseEnter={(e) => {
                                            e.currentTarget.style.backgroundColor = "#5c0079ff";
                                        }}
                                        onMouseLeave={(e) => {
                                            e.currentTarget.style.backgroundColor = "#000000ff";
                                        }}
                                        title="Ciblage des participants"
                                    >
                                        <Users size={16} />
                                        Ciblage
                                    </button>
                                </div>
                            </Grid>

                            <Grid
                                style={{
                                    padding: "0 24px 24px",
                                    maxHeight: "600px",
                                    overflowY: "auto",
                                }}
                            >
                                <Grid
                                    style={{
                                        display: "grid",
                                        gridTemplateColumns: "repeat(3, 1fr)",
                                        gap: "16px",
                                    }}
                                >
                                    {filteredSessions.map((session) => {
                                        const sessionColor = getSessionColor(session);
                                        const active = isSessionActive(session);

                                        return (
                                            <Grid
                                                key={session.id}
                                                onClick={() => handleEditSession(session)}
                                                style={{
                                                    padding: "16px",
                                                    borderRadius: "12px",
                                                    border: "1px solid",
                                                    backgroundColor:
                                                        sessionColor === "yellow"
                                                            ? "#fefce8"
                                                            : sessionColor === "blue"
                                                                ? "#eff6ff"
                                                                : sessionColor === "pink"
                                                                    ? "#fdf2f8"
                                                                    : sessionColor === "green"
                                                                        ? "#f0fdf4"
                                                                        : "#f9fafb",
                                                    borderColor:
                                                        sessionColor === "yellow"
                                                            ? "#fde047"
                                                            : sessionColor === "blue"
                                                                ? "#93c5fd"
                                                                : sessionColor === "pink"
                                                                    ? "#f9a8d4"
                                                                    : sessionColor === "green"
                                                                        ? "#86efac"
                                                                        : "#d1d5db",
                                                    cursor: "pointer",
                                                    transition: "all 0.3s ease",
                                                    position: "relative",
                                                    opacity: active ? 1 : 0.8,
                                                }}
                                                onMouseEnter={(e) => {
                                                    e.currentTarget.style.transform = "translateY(-4px)";
                                                    e.currentTarget.style.boxShadow =
                                                        "0 8px 25px rgba(0,0,0,0.15)";
                                                }}
                                                onMouseLeave={(e) => {
                                                    e.currentTarget.style.transform = "translateY(0)";
                                                    e.currentTarget.style.boxShadow = "none";
                                                }}
                                            >
                                                {!isSessionActive(session) && (
                                                    <div
                                                        style={{
                                                            position: "absolute",
                                                            top: "8px",
                                                            right: "8px",
                                                            width: "20px",
                                                            height: "20px",
                                                            backgroundColor: "#ef4444",
                                                            borderRadius: "50%",
                                                            display: "flex",
                                                            alignItems: "center",
                                                            justifyContent: "center",
                                                            fontSize: "10px",
                                                            color: "white",
                                                            fontWeight: "bold",
                                                        }}
                                                    >
                                                        !
                                                    </div>
                                                )}

                                                <Grid
                                                    style={{
                                                        display: "flex",
                                                        justifyContent: "space-between",
                                                        alignItems: "center",
                                                        marginBottom: "8px",
                                                    }}
                                                >
                                                    <span style={{ fontSize: "11px", color: "#6b7280" }}>
                                                        {session.start_datetime}
                                                    </span>
                                                </Grid>

                                                <h4
                                                    style={{
                                                        fontWeight: "600",
                                                        color: "#111827",
                                                        margin: "0 0 6px 0",
                                                        fontSize: "13px",
                                                    }}
                                                >
                                                    {session.code_session}
                                                </h4>

                                                <Grid
                                                    style={{
                                                        display: "flex",
                                                        justifyContent: "space-between",
                                                        alignItems: "center",
                                                        marginBottom: "8px",
                                                    }}
                                                >
                                                    <span
                                                        style={{
                                                            fontSize: "11px",
                                                            color: getStatusColor(session.status),
                                                            fontWeight: "500",
                                                        }}
                                                    >
                                                        {getSessionDisplayStatus(session.status)}
                                                    </span>
                                                </Grid>

                                                <Grid style={{
                                                    display: "flex",
                                                    justifyContent: "space-between",
                                                    alignItems: "center",
                                                }}>
                                                    <Grid style={{ display: "flex" }}>
                                                        {session.participants
                                                            .slice(0, 2)
                                                            .map((member, index) => (
                                                                <Grid
                                                                    key={index}
                                                                    style={{
                                                                        width: "20px",
                                                                        height: "20px",
                                                                        borderRadius: "50%",
                                                                        border: "2px solid white",
                                                                        marginLeft: index > 0 ? "-4px" : "0",
                                                                        display: "flex",
                                                                        alignItems: "center",
                                                                        justifyContent: "center",
                                                                        fontSize: "8px",
                                                                        backgroundColor:
                                                                            index === 0 ? "#fb923c" : "#60a5fa",
                                                                        zIndex: session.participants.length - index,
                                                                        color: "white",
                                                                    }}
                                                                >
                                                                    {getInitial(member.prenom, member.nom)}
                                                                </Grid>
                                                            ))}

                                                        {session.participants.length > 2 && (
                                                            <Grid
                                                                style={{
                                                                    width: "20px",
                                                                    height: "20px",
                                                                    borderRadius: "50%",
                                                                    border: "2px solid white",
                                                                    marginLeft: "-4px",
                                                                    display: "flex",
                                                                    alignItems: "center",
                                                                    justifyContent: "center",
                                                                    fontSize: "8px",
                                                                    backgroundColor: "#e5e7eb",
                                                                    color: "#6b7280",
                                                                }}
                                                            >
                                                                +{session.participants.length - 2}
                                                            </Grid>
                                                        )}
                                                    </Grid>

                                                    <span
                                                        style={{
                                                            padding: "2px 6px",
                                                            borderRadius: "6px",
                                                            fontSize: "9px",
                                                            fontWeight: "500",
                                                            backgroundColor:
                                                                sessionColor === "yellow"
                                                                    ? "#fef3c7"
                                                                    : sessionColor === "blue"
                                                                        ? "#dbeafe"
                                                                        : sessionColor === "pink"
                                                                            ? "#fce7f3"
                                                                            : sessionColor === "green"
                                                                                ? "#dcfce7"
                                                                                : "#f3e8ff",
                                                            color:
                                                                sessionColor === "yellow"
                                                                    ? "#92400e"
                                                                    : sessionColor === "blue"
                                                                        ? "#1e40af"
                                                                        : sessionColor === "pink"
                                                                            ? "#be185d"
                                                                            : sessionColor === "green"
                                                                                ? "#166534"
                                                                                : "#7c3aed",
                                                        }}
                                                    >
                                                        {session.participants.length} participants
                                                    </span>
                                                </Grid>
                                            </Grid>
                                        );
                                    })}
                                </Grid>

                                {filteredSessions.length === 0 && (
                                    <Grid
                                        style={{
                                            textAlign: "center",
                                            padding: "40px 20px",
                                            color: "#6b7280",
                                        }}
                                    >
                                        <Search
                                            size={48}
                                            color="#d1d5db"
                                            style={{ marginBottom: "16px" }}
                                        />
                                        <p style={{ margin: 0, fontSize: "16px" }}>
                                            Aucune session de formation trouvée
                                        </p>
                                        <p style={{ margin: "8px 0 0 0", fontSize: "14px" }}>
                                            Essayez de modifier vos critères de recherche
                                        </p>
                                    </Grid>
                                )}
                            </Grid>
                        </Grid>
                    </Grid>
                </Grid>

                {/* Utilisation du composant SessionModal */}
                {(selectedSession || addSession) && (
                    <SessionModal
                        selectedSession={selectedSession}
                        addSession={addSession}
                        sessionData={sessionData}
                        setSessionData={setSessionData}
                        participants={participants}
                        onClose={closeModal}
                        onSave={saveSession}
                        onCreate={createSession}
                        onDelete={deleteSession}
                        saving={saving}
                        _status={_status}
                        getSessionColor={getSessionColor}
                        getInitial={getInitial}
                    />
                )}
            </Grid>

            <style>{`
                ::-webkit-scrollbar {
                    width: 6px;
                }
                ::-webkit-scrollbar-track {
                    background: #f1f5f9;
                    border-radius: 3px;
                }
                ::-webkit-scrollbar-thumb {
                    background: #cbd5e1;
                    border-radius: 3px;
                }
                ::-webkit-scrollbar-thumb:hover {
                    background: #94a3b8;
                }
                
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            `}</style>
        </Grid>
    );
};

export default ProfileDashboard;